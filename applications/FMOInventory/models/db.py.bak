# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This scaffolding model makes your app work on Google App Engine too
#########################################################################

if request.env.web2py_runtime_gae:            # if running on Google App Engine
    db = DAL('google:datastore')              # connect to Google BigTable
                                              # optional DAL('gae://namespace')
    session.connect(request, response, db = db) # and store sessions and tickets there
    ### or use the following lines to store sessions in Memcache
    # from gluon.contrib.memdb import MEMDB
    # from google.appengine.api.memcache import Client
    # session.connect(request, response, db = MEMDB(Client()))
else:                                         # else use a normal relational database
    db = DAL('sqlite://storage.sqlite')       # if not, use SQLite or other DB

# by default give a view/generic.extension to all actions from localhost
# none otherwise. a pattern can be 'controller/function.extension'
response.generic_patterns = ['*'] if request.is_local else []

#########################################################################
## Here is sample code if you need for
## - email capabilities
## - authentication (registration, login, logout, ... )
## - authorization (role based authorization)
## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)
## - crud actions
## (more options discussed in gluon/tools.py)
#########################################################################

from gluon.tools import Mail, Auth, Crud, Service, PluginManager, prettydate
mail = Mail()                                  # mailer
auth = Auth(db)                                # authentication/authorization
crud = Crud(db)                                # for CRUD helpers using auth
service = Service()                            # for json, xml, jsonrpc, xmlrpc, amfrpc
plugins = PluginManager()                      # for configuring plugins

mail.settings.server = 'logging' or 'smtp.gmail.com:587'  # your SMTP server
mail.settings.sender = 'you@gmail.com'         # your email
mail.settings.login = 'username:password'      # your credentials or None

auth.settings.hmac_key = 'sha512:3207e191-90a8-4981-8ed8-9870c7b277c5'   # before define_tables()
auth.define_tables()                           # creates all needed tables
auth.settings.mailer = mail                    # for user email verification
auth.settings.registration_requires_verification = False
auth.settings.registration_requires_approval = False
auth.messages.verify_email = 'Click on the link http://'+request.env.http_host+URL('default','user',args=['verify_email'])+'/%(key)s to verify your email'
auth.settings.reset_password_requires_verification = True
auth.messages.reset_password = 'Click on the link http://'+request.env.http_host+URL('default','user',args=['reset_password'])+'/%(key)s to reset your password'

#########################################################################
## If you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.
## register with janrain.com, uncomment and customize following
# from gluon.contrib.login_methods.rpx_account import RPXAccount
# auth.settings.actions_disabled = \
#    ['register','change_password','request_reset_password']
# auth.settings.login_form = RPXAccount(request, api_key='...',domain='...',
#    url = "http://localhost:8000/%s/default/user/login" % request.application)
## other login methods are in gluon/contrib/login_methods
#########################################################################

crud.settings.auth = None        # =auth to enforce authorization on crud

#########################################################################
## Define your tables below (or better in another model file) for example
##
## >>> db.define_table('mytable',Field('myfield','string'))
##
## Fields can be 'string','text','password','integer','double','boolean'
##       'date','time','datetime','blob','upload', 'reference TABLENAME'
## There is an implicit 'id integer autoincrement' field
## Consult manual for more options, validators, etc.
##
## More API examples for controllers:
##
## >>> db.mytable.insert(myfield='value')
## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)
## >>> for row in rows: print row.id, row.myfield
#########################################################################

#variable para el usuario
if auth.is_logged_in():
    me=auth.user.id
else:
    me=None
# desabilita la opción de registro
auth.settings.actions_disabled.append('register')
    
#variable para trabajar solo con números    
is_number = IS_MATCH('^(\+\d{2}\-)?[\d\-]*(\#\d+)?$')   

db.define_table("pdf_template",
    Field("pdf_template_id","id"),
    Field("title"),
    Field("format", requires=IS_IN_SET(["A4","legal","letter"])),
)

db.define_table("pdf_element",
    Field("pdf_template_id", db.pdf_template, requires=IS_IN_DB(db,'pdf_template.pdf_template_id', 'pdf_template.title')),
    Field("name", requires=IS_NOT_EMPTY()),
    Field("type", length=2, requires=IS_IN_SET(['T', 'L', 'I', 'B', 'BC'])),
    Field("x1", "double", requires=IS_NOT_EMPTY()),
    Field("y1", "double", requires=IS_NOT_EMPTY()),
    Field("x2", "double", requires=IS_NOT_EMPTY()),
    Field("y2", "double", requires=IS_NOT_EMPTY()),
    Field("font", default="Arial", requires=IS_IN_SET(['Courier','Arial','Times','Symbol','Zapfdingbats'])),
    Field("size", "double", default="10", requires=IS_NOT_EMPTY()),
    Field("bold", "boolean"),
    Field("italic", "boolean"),
    Field("underline", "boolean"),
    Field("foreground", "integer", default=0x000000, comment="Color text"),
    Field("background", "integer", default=0xFFFFFF, comment="Fill color"),
    Field("align", "string", length=1, default="L", requires=IS_IN_SET(['L', 'R', 'C', 'J'])),
    Field("text", "text", comment="Default text"),
    Field("priority", "integer", default=0, comment="Z-Order"),
    )

db.define_table('item_version',
    Field('name', unique=True, notnull=True),
    Field('created_by', db.auth_user, default=me, writable=False, readable=False),
    Field('created_on','datetime',default=request.now,writable=False, readable=False),
    format='%(name)s')
 
db.define_table('supplies',
    Field('name'),
    Field('created_by', db.auth_user, default=me, writable=False, readable=False),
    Field('created_on','datetime',default=request.now,writable=False, readable=False))
    
    
db.define_table('laptops',
    Field('Serial','string'), 
    Field('User','string'), 
    Field('Grade'),
    Field('Charger','string'),
    Field('Battery', 'string'),
    Field('Time','string', default='no data'), 
    Field('Info','text', default='no data'),
    Field('Os','string'),
    Field('Version', db.item_version, notnull=True), 
    Field('File','upload', default='no image', uploadfield='picture_file'),
    Field('picture_file', 'blob'),
    Field('created_by', db.auth_user, default=me, writable=False, readable=False),
    Field('created_on','datetime',default=request.now,writable=False, readable=False))

db.laptops.Serial.requires=[IS_NOT_EMPTY(), IS_NOT_IN_DB(db, 'laptops.Serial')]
db.laptops.User.requires=[IS_NOT_EMPTY(), IS_NOT_IN_DB(db, 'laptops.User')]
db.laptops.Version.requires=IS_IN_DB(db, 'item_version.id', 'item_version.name')
db.laptops.Grade.requires=[IS_NOT_EMPTY(error_message=T('not_in_me'))]
db.laptops.Grade.requires=IS_IN_SET(['k','1','2','3','4','5','6','W','IERMO','GOL','CERCA'])
db.laptops.Charger.requires=[IS_NOT_EMPTY(), IS_NOT_IN_DB(db, 'laptops.Charger')]
 
  
db.define_table('computer',
    Field('serial','string'),
    Field('Version','string', db.item_version),
    Field('Project','string'),
    Field('created_by', db.auth_user, default=me, writable=False, readable=False),
    Field('created_on','datetime',default=request.now,writable=False, readable=False))

db.computer.serial.requires=[IS_NOT_EMPTY(), IS_NOT_IN_DB(db, 'computer.serial')]

# Allow privileges to powertable
#if auth.is_logged_in():    
#    db.laptops.id.represent=lambda id: A('edit',_href=URL(r=request,c='default',f='edit_laptop',args=id))
#else:
#    pass
    


db.define_table('parts',
    Field('Name', db.supplies),
    Field('Serial'),
    Field('Location','string'),
    Field('Quantity'),
    Field('Image','upload', default='no image', uploadfield='picture_file'),
    Field('picture_file', 'blob'),
    Field('Info','text'),
    Field('Price','double'),
    Field('Datein','datetime'),
    Field('Dateout','datetime'),
    Field('created_by', db.auth_user, default=me, writable=False, readable=False),
    Field('created_on','datetime',default=request.now,writable=False, readable=False))

db.parts.Name.requires=IS_IN_DB(db,'supplies.id', 'supplies.name')  
    
db.define_table('sell_parts',
    Field('Name', db.supplies),
    Field('Serial', db.parts),
    Field('Location','string'),
    Field('Quantity'),
    Field('Image','upload', default='no image', uploadfield='picture_file'),
    Field('picture_file', 'blob'),
    Field('Info','text'),
    Field('Price','double'),
    Field('Datein','datetime'),
    Field('Dateout','datetime'),
    Field('created_by', db.auth_user, default=me, writable=False, readable=False),
    Field('created_on','datetime',default=request.now,writable=False, readable=False))

db.sell_parts.Serial.requires=IS_IN_DB(db,'parts.id' ,'parts.Serial')
db.sell_parts.Name.requires=IS_IN_DB(db,'supplies.id', 'supplies.name')


    
    

db.define_table('tools',
    Field('Name','string'),
    Field('Quantity','string'),
    Field('Location','string'),
    Field('created_by',db.auth_user,default=me,writable=False,readable=False),
    Field('created_on','datetime',default=request.now,writable=False,readable=False))

    
db.define_table('docs',
    Field('Name','string'),
    Field('Info','text'),
    Field('Location','string'),
    Field('File','upload'),
    Field('created_by',db.auth_user,default=me,writable=False,readable=False),
    Field('created_on','datetime',default=request.now,writable=False,readable=False))

db.laptops.File.default="no image"  
#db.laptops.Info.default="no data"  

db.define_table('person',
    Field('name','string'),
    Field('School'),
    Field('Role','string'),
    Field('Address','string'),
    Field('Phone'),
    Field('Fax'),
    Field('created_by',db.auth_user,default=me,writable=False,readable=False),
    Field('created_on','datetime',default=request.now,writable=False,readable=False)) 
    
db.person.Phone.requires=is_number
#db.laptops.id.represent=lambda id: A('edit',_href=URL(r=request,c='default',f='edit_laptop',args=id))

db.define_table('movements',
    Field('serial', db.laptops),
    Field('action'),
    Field('name'),
    Field('info','text'),
    Field('File','upload', default='no image', uploadfield='picture_file'),
    Field('picture_file', 'blob'),
    Field('created_by',db.auth_user,default=me,writable=False,readable=False),
    Field('created_on','datetime',default=request.now,writable=False,readable=False)) 
    
db.movements.serial.requires=IS_IN_DB(db,'laptops.id' ,'laptops.Serial')
db.movements.action.requires=IS_IN_SET(['Prestamo','Reparacion','Robo','Traslado','Intercambio',])

#for sell in db.parts.id:
#   if "Pantalla" in sell:
#       print "jajajaja"
#   else:
#       pass
#pass
